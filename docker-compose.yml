services:
  database:
    image: postgres:latest
    ports:
      - 5432:5432
    env_file:
      - .env
    networks:
      - database-network
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ./data/init.sql:/docker-entrypoint-initdb.d/init.sql # SQL script for seeding db with data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 5433:80
    environment:
      - PGADMIN_SERVER_JSON_FILE=/var/lib/pgadmin/server.json
    env_file:
      - .env
    networks:
      - database-network
    volumes:
      - pgadmin-data:/var/lib/pgadmin/
      - ./data/pgadmin_server_config.json:/var/lib/pgadmin/server.json
    depends_on:
      database:
        condition: service_healthy
        restart: true

  inventory-api:
    build:
      context: Inventory.Api
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
    ports:
      - 8080
    volumes:
      - ./certs/dev/Inventory.pfx:/app/https/Inventory.pfx
    networks:
      - database-network
      - nginx-proxy-network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://127.0.0.1:8080/healthz || exit 1"]
      retries: 5
      start_period: 10s
      timeout: 10s
    depends_on:
      database:
        condition: service_healthy
        restart: true

  inventory-admin-client:
    build: 
      context: inventory.admin.client
      dockerfile: Dockerfile
      target: runner
    ports:
      - 57122
    networks:
      - nginx-proxy-network
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://127.0.0.1:57122 || exit 1"]
      retries: 5
      start_period: 10s
      timeout: 10s
    depends_on:
      inventory-api:
        condition: service_started

  nginx-proxy:
    build: 
      context: nginx-proxy
      dockerfile: Dockerfile
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx-proxy/certs:/etc/nginx/ssl
    networks:
      - nginx-proxy-network
    depends_on:
      inventory-api:
        condition: service_healthy
        restart: true
      inventory-admin-client:
        condition: service_healthy
        restart: true

networks:
  database-network:
    driver: bridge
  nginx-proxy-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data: